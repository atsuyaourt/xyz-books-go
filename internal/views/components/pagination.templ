package components

import (
	"strconv"
	"fmt"

	"github.com/atsuyaourt/xyz-books/internal/util"
)

templ Pagination[T any](paginatedList util.PaginatedList[T]) {
	<nav
		aria-label="Page navigation"
		x-data={ fmt.Sprintf(`{ page: %d, perPage: %d }`, paginatedList.CurrentPage, paginatedList.PerPage) }
	>
		<input type="hidden" id="page" name="page" x-model="page" x-init="$watch('page', () => htmx.trigger('#page','change', {}))"/>
		<input type="hidden" id="per-page" name="per_page" :value="perPage" x-init="$watch('perPage', () => htmx.trigger('#per-page','change', {}))"/>
		<ul class="flex items-center -space-x-px h-8 text-sm">
			<li>
				<button
					if (paginatedList.PrevPage != 0) {
						@click.prevent={ fmt.Sprintf("page = %d", paginatedList.PrevPage) }
					} else {
						disabled
					}
					class="flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
				>
					<span class="sr-only">Previous</span>
					<svg class="w-2.5 h-2.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"></path>
					</svg>
				</button>
			</li>
			for i := int32(1); i <= paginatedList.TotalPages; i++ {
				<li>
					<button
						@click.prevent={ fmt.Sprintf("page = %d", i) }
						class={ pageAnchorClass(paginatedList.CurrentPage == i) }
						if paginatedList.CurrentPage == i {
							aria-current="page"
						}
					>{ strconv.Itoa(int(i)) }</button>
				</li>
			}
			<li>
				<button
					if (paginatedList.NextPage != 0) {
						@click.prevent={ fmt.Sprintf("page = %d", paginatedList.NextPage) }
					} else {
						disabled
					}
					class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
				>
					<span class="sr-only">Next</span>
					<svg class="w-2.5 h-2.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"></path>
					</svg>
				</button>
			</li>
		</ul>
	</nav>
}

func pageAnchorClass(isActive bool) string {
	baseClass := "flex items-center justify-center px-3 h-8 leading-tight border dark:border-gray-700"
	defaultClass := "text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
	activeClass := "z-10 text-blue-600 border-blue-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:bg-gray-700 dark:text-white"
	if isActive {
		return fmt.Sprintf("%s %s", baseClass, activeClass)
	}
	return fmt.Sprintf("%s %s", baseClass, defaultClass)
}
