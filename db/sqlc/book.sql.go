// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: book.sql

package db

import (
	"context"
	"database/sql"
)

const countBooks = `-- name: CountBooks :one
SELECT
  COUNT(DISTINCT b.book_id)
FROM
  books b
JOIN author_book ab ON b.book_id = ab.book_id
JOIN authors a ON ab.author_id = a.author_id
JOIN publishers p ON b.publisher_id = p.publisher_id
WHERE
  (b.title LIKE '%' || ?1 || '%' OR ?1 IS NULL)
  AND (b.price >= ?2 OR ?2 IS NULL)
  AND (b.price <= ?3 OR ?3 IS NULL)
  AND (b.publication_year >= ?4 OR ?4 IS NULL)
  AND (b.publication_year <= ?5 OR ?5 IS NULL)
  AND (a.first_name || ' ' || a.middle_name || ' ' || a.last_name LIKE '%' || ?6 || '%' OR ?6 IS NULL)
  AND (p.publisher_name LIKE '%' || ?7 || '%' OR ?7 IS NULL)
`

type CountBooksParams struct {
	Title              sql.NullString  `json:"title"`
	MinPrice           sql.NullFloat64 `json:"min_price"`
	MaxPrice           sql.NullFloat64 `json:"max_price"`
	MinPublicationYear sql.NullInt64   `json:"min_publication_year"`
	MaxPublicationYear sql.NullInt64   `json:"max_publication_year"`
	Author             sql.NullString  `json:"author"`
	Publisher          sql.NullString  `json:"publisher"`
}

func (q *Queries) CountBooks(ctx context.Context, arg CountBooksParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBooks,
		arg.Title,
		arg.MinPrice,
		arg.MaxPrice,
		arg.MinPublicationYear,
		arg.MaxPublicationYear,
		arg.Author,
		arg.Publisher,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  title,
  isbn13,
  isbn10,
  price,
  publication_year,
  image_url,
  edition,
  publisher_id
) VALUES (
  ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8
) RETURNING book_id, title, isbn13, isbn10, price, publication_year, image_url, edition, publisher_id
`

type CreateBookParams struct {
	Title           string         `json:"title"`
	Isbn13          sql.NullString `json:"isbn13"`
	Isbn10          sql.NullString `json:"isbn10"`
	Price           float64        `json:"price"`
	PublicationYear int64          `json:"publication_year"`
	ImageUrl        sql.NullString `json:"image_url"`
	Edition         sql.NullString `json:"edition"`
	PublisherID     int64          `json:"publisher_id"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.Isbn13,
		arg.Isbn10,
		arg.Price,
		arg.PublicationYear,
		arg.ImageUrl,
		arg.Edition,
		arg.PublisherID,
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.Title,
		&i.Isbn13,
		&i.Isbn10,
		&i.Price,
		&i.PublicationYear,
		&i.ImageUrl,
		&i.Edition,
		&i.PublisherID,
	)
	return i, err
}

const deleteBookByISBN = `-- name: DeleteBookByISBN :exec
DELETE FROM books 
WHERE 
  isbn13 = ?1
  OR isbn10 = ?2
`

type DeleteBookByISBNParams struct {
	Isbn13 sql.NullString `json:"isbn13"`
	Isbn10 sql.NullString `json:"isbn10"`
}

func (q *Queries) DeleteBookByISBN(ctx context.Context, arg DeleteBookByISBNParams) error {
	_, err := q.db.ExecContext(ctx, deleteBookByISBN, arg.Isbn13, arg.Isbn10)
	return err
}

const getBookByISBN = `-- name: GetBookByISBN :one
SELECT
	b.book_id, b.title, b.isbn13, b.isbn10, b.price, b.publication_year, b.image_url, b.edition, b.publisher_id,
	GROUP_CONCAT(a.first_name || CASE WHEN a.middle_name IS NOT NULL THEN
			' ' || a.middle_name || ' '
		ELSE
			' '
		END || a.last_name) AS authors,
	p.publisher_name AS publisher_name
FROM
	books AS b
	JOIN author_book AS ab ON b.book_id = ab.book_id
	JOIN authors AS a ON ab.author_id = a.author_id
	JOIN publishers AS p ON b.publisher_id = p.publisher_id
WHERE
	b.isbn13 = ?1 OR b.isbn10 = ?2
GROUP BY
	b.title,
	p.publisher_name
`

type GetBookByISBNParams struct {
	Isbn13 sql.NullString `json:"isbn13"`
	Isbn10 sql.NullString `json:"isbn10"`
}

type GetBookByISBNRow struct {
	Book          Book   `json:"book"`
	Authors       string `json:"authors"`
	PublisherName string `json:"publisher_name"`
}

func (q *Queries) GetBookByISBN(ctx context.Context, arg GetBookByISBNParams) (GetBookByISBNRow, error) {
	row := q.db.QueryRowContext(ctx, getBookByISBN, arg.Isbn13, arg.Isbn10)
	var i GetBookByISBNRow
	err := row.Scan(
		&i.Book.BookID,
		&i.Book.Title,
		&i.Book.Isbn13,
		&i.Book.Isbn10,
		&i.Book.Price,
		&i.Book.PublicationYear,
		&i.Book.ImageUrl,
		&i.Book.Edition,
		&i.Book.PublisherID,
		&i.Authors,
		&i.PublisherName,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT
  b.book_id, b.title, b.isbn13, b.isbn10, b.price, b.publication_year, b.image_url, b.edition, b.publisher_id,
  GROUP_CONCAT(a.first_name || CASE WHEN a.middle_name IS NOT NULL THEN
			' ' || a.middle_name || ' '
		ELSE
			' '
		END || a.last_name) AS authors,
  p.publisher_name AS publisher_name
FROM
  books b
JOIN author_book ab ON b.book_id = ab.book_id
JOIN authors a ON ab.author_id = a.author_id
JOIN publishers p ON b.publisher_id = p.publisher_id
WHERE
  (b.title LIKE '%' || ?1 || '%' OR ?1 IS NULL)
  AND (b.price >= ?2 OR ?2 IS NULL)
  AND (b.price <= ?3 OR ?3 IS NULL)
  AND (b.publication_year >= ?4 OR ?4 IS NULL)
  AND (b.publication_year <= ?5 OR ?5 IS NULL)
  AND (a.first_name || ' ' || a.middle_name || ' ' || a.last_name LIKE '%' || ?6 || '%' OR ?6 IS NULL)
  AND (p.publisher_name LIKE '%' || ?7 || '%' OR ?7 IS NULL)
GROUP BY
	b.title,
	p.publisher_name
LIMIT ?9
OFFSET ?8
`

type ListBooksParams struct {
	Title              sql.NullString  `json:"title"`
	MinPrice           sql.NullFloat64 `json:"min_price"`
	MaxPrice           sql.NullFloat64 `json:"max_price"`
	MinPublicationYear sql.NullInt64   `json:"min_publication_year"`
	MaxPublicationYear sql.NullInt64   `json:"max_publication_year"`
	Author             sql.NullString  `json:"author"`
	Publisher          sql.NullString  `json:"publisher"`
	Offset             int64           `json:"offset"`
	Limit              int64           `json:"limit"`
}

type ListBooksRow struct {
	Book          Book   `json:"book"`
	Authors       string `json:"authors"`
	PublisherName string `json:"publisher_name"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]ListBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, listBooks,
		arg.Title,
		arg.MinPrice,
		arg.MaxPrice,
		arg.MinPublicationYear,
		arg.MaxPublicationYear,
		arg.Author,
		arg.Publisher,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBooksRow{}
	for rows.Next() {
		var i ListBooksRow
		if err := rows.Scan(
			&i.Book.BookID,
			&i.Book.Title,
			&i.Book.Isbn13,
			&i.Book.Isbn10,
			&i.Book.Price,
			&i.Book.PublicationYear,
			&i.Book.ImageUrl,
			&i.Book.Edition,
			&i.Book.PublisherID,
			&i.Authors,
			&i.PublisherName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookByISBN = `-- name: UpdateBookByISBN :one
UPDATE books
SET
  title = COALESCE(?1, title),
  isbn13 = COALESCE(?2, isbn13),
  isbn10 = COALESCE(?3, isbn10),
  price = COALESCE(?4, price),
  publication_year = COALESCE(?5, publication_year),
  image_url = COALESCE(?6, image_url)
WHERE
  isbn13 = ?7 OR isbn10 = ?8
RETURNING book_id, title, isbn13, isbn10, price, publication_year, image_url, edition, publisher_id
`

type UpdateBookByISBNParams struct {
	Title           sql.NullString  `json:"title"`
	NewIsbn13       sql.NullString  `json:"new_isbn13"`
	NewIsbn10       sql.NullString  `json:"new_isbn10"`
	Price           sql.NullFloat64 `json:"price"`
	PublicationYear sql.NullInt64   `json:"publication_year"`
	ImageUrl        sql.NullString  `json:"image_url"`
	Isbn13          sql.NullString  `json:"isbn13"`
	Isbn10          sql.NullString  `json:"isbn10"`
}

func (q *Queries) UpdateBookByISBN(ctx context.Context, arg UpdateBookByISBNParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBookByISBN,
		arg.Title,
		arg.NewIsbn13,
		arg.NewIsbn10,
		arg.Price,
		arg.PublicationYear,
		arg.ImageUrl,
		arg.Isbn13,
		arg.Isbn10,
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.Title,
		&i.Isbn13,
		&i.Isbn10,
		&i.Price,
		&i.PublicationYear,
		&i.ImageUrl,
		&i.Edition,
		&i.PublisherID,
	)
	return i, err
}
