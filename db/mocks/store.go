// Code generated by mockery v2.34.2. DO NOT EDIT.

package mockdb

import (
	context "context"

	db "github.com/emiliogozo/xyz-books/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// CountAuthors provides a mock function with given fields: ctx
func (_m *MockStore) CountAuthors(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountAuthors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAuthors'
type MockStore_CountAuthors_Call struct {
	*mock.Call
}

// CountAuthors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) CountAuthors(ctx interface{}) *MockStore_CountAuthors_Call {
	return &MockStore_CountAuthors_Call{Call: _e.mock.On("CountAuthors", ctx)}
}

func (_c *MockStore_CountAuthors_Call) Run(run func(ctx context.Context)) *MockStore_CountAuthors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_CountAuthors_Call) Return(_a0 int64, _a1 error) *MockStore_CountAuthors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountAuthors_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockStore_CountAuthors_Call {
	_c.Call.Return(run)
	return _c
}

// CountBooks provides a mock function with given fields: ctx, arg
func (_m *MockStore) CountBooks(ctx context.Context, arg db.CountBooksParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CountBooksParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CountBooksParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CountBooksParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountBooks'
type MockStore_CountBooks_Call struct {
	*mock.Call
}

// CountBooks is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CountBooksParams
func (_e *MockStore_Expecter) CountBooks(ctx interface{}, arg interface{}) *MockStore_CountBooks_Call {
	return &MockStore_CountBooks_Call{Call: _e.mock.On("CountBooks", ctx, arg)}
}

func (_c *MockStore_CountBooks_Call) Run(run func(ctx context.Context, arg db.CountBooksParams)) *MockStore_CountBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CountBooksParams))
	})
	return _c
}

func (_c *MockStore_CountBooks_Call) Return(_a0 int64, _a1 error) *MockStore_CountBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountBooks_Call) RunAndReturn(run func(context.Context, db.CountBooksParams) (int64, error)) *MockStore_CountBooks_Call {
	_c.Call.Return(run)
	return _c
}

// CountPublishers provides a mock function with given fields: ctx
func (_m *MockStore) CountPublishers(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CountPublishers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountPublishers'
type MockStore_CountPublishers_Call struct {
	*mock.Call
}

// CountPublishers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStore_Expecter) CountPublishers(ctx interface{}) *MockStore_CountPublishers_Call {
	return &MockStore_CountPublishers_Call{Call: _e.mock.On("CountPublishers", ctx)}
}

func (_c *MockStore_CountPublishers_Call) Run(run func(ctx context.Context)) *MockStore_CountPublishers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_CountPublishers_Call) Return(_a0 int64, _a1 error) *MockStore_CountPublishers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CountPublishers_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockStore_CountPublishers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthor provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateAuthor(ctx context.Context, arg db.CreateAuthorParams) (db.Author, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAuthorParams) (db.Author, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAuthorParams) db.Author); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Author)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateAuthorParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthor'
type MockStore_CreateAuthor_Call struct {
	*mock.Call
}

// CreateAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateAuthorParams
func (_e *MockStore_Expecter) CreateAuthor(ctx interface{}, arg interface{}) *MockStore_CreateAuthor_Call {
	return &MockStore_CreateAuthor_Call{Call: _e.mock.On("CreateAuthor", ctx, arg)}
}

func (_c *MockStore_CreateAuthor_Call) Run(run func(ctx context.Context, arg db.CreateAuthorParams)) *MockStore_CreateAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateAuthorParams))
	})
	return _c
}

func (_c *MockStore_CreateAuthor_Call) Return(_a0 db.Author, _a1 error) *MockStore_CreateAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateAuthor_Call) RunAndReturn(run func(context.Context, db.CreateAuthorParams) (db.Author, error)) *MockStore_CreateAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthorBookRel provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateAuthorBookRel(ctx context.Context, arg db.CreateAuthorBookRelParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAuthorBookRelParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_CreateAuthorBookRel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthorBookRel'
type MockStore_CreateAuthorBookRel_Call struct {
	*mock.Call
}

// CreateAuthorBookRel is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateAuthorBookRelParams
func (_e *MockStore_Expecter) CreateAuthorBookRel(ctx interface{}, arg interface{}) *MockStore_CreateAuthorBookRel_Call {
	return &MockStore_CreateAuthorBookRel_Call{Call: _e.mock.On("CreateAuthorBookRel", ctx, arg)}
}

func (_c *MockStore_CreateAuthorBookRel_Call) Run(run func(ctx context.Context, arg db.CreateAuthorBookRelParams)) *MockStore_CreateAuthorBookRel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateAuthorBookRelParams))
	})
	return _c
}

func (_c *MockStore_CreateAuthorBookRel_Call) Return(_a0 error) *MockStore_CreateAuthorBookRel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_CreateAuthorBookRel_Call) RunAndReturn(run func(context.Context, db.CreateAuthorBookRelParams) error) *MockStore_CreateAuthorBookRel_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBook provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateBook(ctx context.Context, arg db.CreateBookParams) (db.Book, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateBookParams) (db.Book, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateBookParams) db.Book); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateBookParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBook'
type MockStore_CreateBook_Call struct {
	*mock.Call
}

// CreateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateBookParams
func (_e *MockStore_Expecter) CreateBook(ctx interface{}, arg interface{}) *MockStore_CreateBook_Call {
	return &MockStore_CreateBook_Call{Call: _e.mock.On("CreateBook", ctx, arg)}
}

func (_c *MockStore_CreateBook_Call) Run(run func(ctx context.Context, arg db.CreateBookParams)) *MockStore_CreateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateBookParams))
	})
	return _c
}

func (_c *MockStore_CreateBook_Call) Return(_a0 db.Book, _a1 error) *MockStore_CreateBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreateBook_Call) RunAndReturn(run func(context.Context, db.CreateBookParams) (db.Book, error)) *MockStore_CreateBook_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBookTx provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateBookTx(ctx context.Context, arg db.CreateBookTxParams) (db.Book, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateBookTxParams) (db.Book, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateBookTxParams) db.Book); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateBookTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreateBookTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBookTx'
type MockStore_CreateBookTx_Call struct {
	*mock.Call
}

// CreateBookTx is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateBookTxParams
func (_e *MockStore_Expecter) CreateBookTx(ctx interface{}, arg interface{}) *MockStore_CreateBookTx_Call {
	return &MockStore_CreateBookTx_Call{Call: _e.mock.On("CreateBookTx", ctx, arg)}
}

func (_c *MockStore_CreateBookTx_Call) Run(run func(ctx context.Context, arg db.CreateBookTxParams)) *MockStore_CreateBookTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateBookTxParams))
	})
	return _c
}

func (_c *MockStore_CreateBookTx_Call) Return(book db.Book, err error) *MockStore_CreateBookTx_Call {
	_c.Call.Return(book, err)
	return _c
}

func (_c *MockStore_CreateBookTx_Call) RunAndReturn(run func(context.Context, db.CreateBookTxParams) (db.Book, error)) *MockStore_CreateBookTx_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePublisher provides a mock function with given fields: ctx, publisherName
func (_m *MockStore) CreatePublisher(ctx context.Context, publisherName string) (db.Publisher, error) {
	ret := _m.Called(ctx, publisherName)

	var r0 db.Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Publisher, error)); ok {
		return rf(ctx, publisherName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Publisher); ok {
		r0 = rf(ctx, publisherName)
	} else {
		r0 = ret.Get(0).(db.Publisher)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, publisherName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_CreatePublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePublisher'
type MockStore_CreatePublisher_Call struct {
	*mock.Call
}

// CreatePublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - publisherName string
func (_e *MockStore_Expecter) CreatePublisher(ctx interface{}, publisherName interface{}) *MockStore_CreatePublisher_Call {
	return &MockStore_CreatePublisher_Call{Call: _e.mock.On("CreatePublisher", ctx, publisherName)}
}

func (_c *MockStore_CreatePublisher_Call) Run(run func(ctx context.Context, publisherName string)) *MockStore_CreatePublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_CreatePublisher_Call) Return(_a0 db.Publisher, _a1 error) *MockStore_CreatePublisher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_CreatePublisher_Call) RunAndReturn(run func(context.Context, string) (db.Publisher, error)) *MockStore_CreatePublisher_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthor provides a mock function with given fields: ctx, authorID
func (_m *MockStore) DeleteAuthor(ctx context.Context, authorID int64) error {
	ret := _m.Called(ctx, authorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, authorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthor'
type MockStore_DeleteAuthor_Call struct {
	*mock.Call
}

// DeleteAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - authorID int64
func (_e *MockStore_Expecter) DeleteAuthor(ctx interface{}, authorID interface{}) *MockStore_DeleteAuthor_Call {
	return &MockStore_DeleteAuthor_Call{Call: _e.mock.On("DeleteAuthor", ctx, authorID)}
}

func (_c *MockStore_DeleteAuthor_Call) Run(run func(ctx context.Context, authorID int64)) *MockStore_DeleteAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_DeleteAuthor_Call) Return(_a0 error) *MockStore_DeleteAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteAuthor_Call) RunAndReturn(run func(context.Context, int64) error) *MockStore_DeleteAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBookByISBN provides a mock function with given fields: ctx, arg
func (_m *MockStore) DeleteBookByISBN(ctx context.Context, arg db.DeleteBookByISBNParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.DeleteBookByISBNParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteBookByISBN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBookByISBN'
type MockStore_DeleteBookByISBN_Call struct {
	*mock.Call
}

// DeleteBookByISBN is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.DeleteBookByISBNParams
func (_e *MockStore_Expecter) DeleteBookByISBN(ctx interface{}, arg interface{}) *MockStore_DeleteBookByISBN_Call {
	return &MockStore_DeleteBookByISBN_Call{Call: _e.mock.On("DeleteBookByISBN", ctx, arg)}
}

func (_c *MockStore_DeleteBookByISBN_Call) Run(run func(ctx context.Context, arg db.DeleteBookByISBNParams)) *MockStore_DeleteBookByISBN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.DeleteBookByISBNParams))
	})
	return _c
}

func (_c *MockStore_DeleteBookByISBN_Call) Return(_a0 error) *MockStore_DeleteBookByISBN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteBookByISBN_Call) RunAndReturn(run func(context.Context, db.DeleteBookByISBNParams) error) *MockStore_DeleteBookByISBN_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePublisher provides a mock function with given fields: ctx, publisherID
func (_m *MockStore) DeletePublisher(ctx context.Context, publisherID int64) error {
	ret := _m.Called(ctx, publisherID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, publisherID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeletePublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePublisher'
type MockStore_DeletePublisher_Call struct {
	*mock.Call
}

// DeletePublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - publisherID int64
func (_e *MockStore_Expecter) DeletePublisher(ctx interface{}, publisherID interface{}) *MockStore_DeletePublisher_Call {
	return &MockStore_DeletePublisher_Call{Call: _e.mock.On("DeletePublisher", ctx, publisherID)}
}

func (_c *MockStore_DeletePublisher_Call) Run(run func(ctx context.Context, publisherID int64)) *MockStore_DeletePublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_DeletePublisher_Call) Return(_a0 error) *MockStore_DeletePublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeletePublisher_Call) RunAndReturn(run func(context.Context, int64) error) *MockStore_DeletePublisher_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthor provides a mock function with given fields: ctx, authorID
func (_m *MockStore) GetAuthor(ctx context.Context, authorID int64) (db.Author, error) {
	ret := _m.Called(ctx, authorID)

	var r0 db.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Author, error)); ok {
		return rf(ctx, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Author); ok {
		r0 = rf(ctx, authorID)
	} else {
		r0 = ret.Get(0).(db.Author)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthor'
type MockStore_GetAuthor_Call struct {
	*mock.Call
}

// GetAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - authorID int64
func (_e *MockStore_Expecter) GetAuthor(ctx interface{}, authorID interface{}) *MockStore_GetAuthor_Call {
	return &MockStore_GetAuthor_Call{Call: _e.mock.On("GetAuthor", ctx, authorID)}
}

func (_c *MockStore_GetAuthor_Call) Run(run func(ctx context.Context, authorID int64)) *MockStore_GetAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_GetAuthor_Call) Return(_a0 db.Author, _a1 error) *MockStore_GetAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetAuthor_Call) RunAndReturn(run func(context.Context, int64) (db.Author, error)) *MockStore_GetAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorByName provides a mock function with given fields: ctx, arg
func (_m *MockStore) GetAuthorByName(ctx context.Context, arg db.GetAuthorByNameParams) (db.Author, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetAuthorByNameParams) (db.Author, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetAuthorByNameParams) db.Author); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Author)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetAuthorByNameParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetAuthorByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorByName'
type MockStore_GetAuthorByName_Call struct {
	*mock.Call
}

// GetAuthorByName is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetAuthorByNameParams
func (_e *MockStore_Expecter) GetAuthorByName(ctx interface{}, arg interface{}) *MockStore_GetAuthorByName_Call {
	return &MockStore_GetAuthorByName_Call{Call: _e.mock.On("GetAuthorByName", ctx, arg)}
}

func (_c *MockStore_GetAuthorByName_Call) Run(run func(ctx context.Context, arg db.GetAuthorByNameParams)) *MockStore_GetAuthorByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetAuthorByNameParams))
	})
	return _c
}

func (_c *MockStore_GetAuthorByName_Call) Return(_a0 db.Author, _a1 error) *MockStore_GetAuthorByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetAuthorByName_Call) RunAndReturn(run func(context.Context, db.GetAuthorByNameParams) (db.Author, error)) *MockStore_GetAuthorByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookByISBN provides a mock function with given fields: ctx, arg
func (_m *MockStore) GetBookByISBN(ctx context.Context, arg db.GetBookByISBNParams) (db.GetBookByISBNRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.GetBookByISBNRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetBookByISBNParams) (db.GetBookByISBNRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetBookByISBNParams) db.GetBookByISBNRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.GetBookByISBNRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetBookByISBNParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetBookByISBN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookByISBN'
type MockStore_GetBookByISBN_Call struct {
	*mock.Call
}

// GetBookByISBN is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetBookByISBNParams
func (_e *MockStore_Expecter) GetBookByISBN(ctx interface{}, arg interface{}) *MockStore_GetBookByISBN_Call {
	return &MockStore_GetBookByISBN_Call{Call: _e.mock.On("GetBookByISBN", ctx, arg)}
}

func (_c *MockStore_GetBookByISBN_Call) Run(run func(ctx context.Context, arg db.GetBookByISBNParams)) *MockStore_GetBookByISBN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetBookByISBNParams))
	})
	return _c
}

func (_c *MockStore_GetBookByISBN_Call) Return(_a0 db.GetBookByISBNRow, _a1 error) *MockStore_GetBookByISBN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetBookByISBN_Call) RunAndReturn(run func(context.Context, db.GetBookByISBNParams) (db.GetBookByISBNRow, error)) *MockStore_GetBookByISBN_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublisher provides a mock function with given fields: ctx, publisherID
func (_m *MockStore) GetPublisher(ctx context.Context, publisherID int64) (db.Publisher, error) {
	ret := _m.Called(ctx, publisherID)

	var r0 db.Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Publisher, error)); ok {
		return rf(ctx, publisherID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Publisher); ok {
		r0 = rf(ctx, publisherID)
	} else {
		r0 = ret.Get(0).(db.Publisher)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, publisherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublisher'
type MockStore_GetPublisher_Call struct {
	*mock.Call
}

// GetPublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - publisherID int64
func (_e *MockStore_Expecter) GetPublisher(ctx interface{}, publisherID interface{}) *MockStore_GetPublisher_Call {
	return &MockStore_GetPublisher_Call{Call: _e.mock.On("GetPublisher", ctx, publisherID)}
}

func (_c *MockStore_GetPublisher_Call) Run(run func(ctx context.Context, publisherID int64)) *MockStore_GetPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_GetPublisher_Call) Return(_a0 db.Publisher, _a1 error) *MockStore_GetPublisher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPublisher_Call) RunAndReturn(run func(context.Context, int64) (db.Publisher, error)) *MockStore_GetPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublisherByName provides a mock function with given fields: ctx, publisherName
func (_m *MockStore) GetPublisherByName(ctx context.Context, publisherName string) (db.Publisher, error) {
	ret := _m.Called(ctx, publisherName)

	var r0 db.Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Publisher, error)); ok {
		return rf(ctx, publisherName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Publisher); ok {
		r0 = rf(ctx, publisherName)
	} else {
		r0 = ret.Get(0).(db.Publisher)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, publisherName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPublisherByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublisherByName'
type MockStore_GetPublisherByName_Call struct {
	*mock.Call
}

// GetPublisherByName is a helper method to define mock.On call
//   - ctx context.Context
//   - publisherName string
func (_e *MockStore_Expecter) GetPublisherByName(ctx interface{}, publisherName interface{}) *MockStore_GetPublisherByName_Call {
	return &MockStore_GetPublisherByName_Call{Call: _e.mock.On("GetPublisherByName", ctx, publisherName)}
}

func (_c *MockStore_GetPublisherByName_Call) Run(run func(ctx context.Context, publisherName string)) *MockStore_GetPublisherByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetPublisherByName_Call) Return(_a0 db.Publisher, _a1 error) *MockStore_GetPublisherByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPublisherByName_Call) RunAndReturn(run func(context.Context, string) (db.Publisher, error)) *MockStore_GetPublisherByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListAuthors provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListAuthors(ctx context.Context, arg db.ListAuthorsParams) ([]db.Author, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAuthorsParams) ([]db.Author, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAuthorsParams) []db.Author); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListAuthorsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListAuthors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAuthors'
type MockStore_ListAuthors_Call struct {
	*mock.Call
}

// ListAuthors is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListAuthorsParams
func (_e *MockStore_Expecter) ListAuthors(ctx interface{}, arg interface{}) *MockStore_ListAuthors_Call {
	return &MockStore_ListAuthors_Call{Call: _e.mock.On("ListAuthors", ctx, arg)}
}

func (_c *MockStore_ListAuthors_Call) Run(run func(ctx context.Context, arg db.ListAuthorsParams)) *MockStore_ListAuthors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListAuthorsParams))
	})
	return _c
}

func (_c *MockStore_ListAuthors_Call) Return(_a0 []db.Author, _a1 error) *MockStore_ListAuthors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListAuthors_Call) RunAndReturn(run func(context.Context, db.ListAuthorsParams) ([]db.Author, error)) *MockStore_ListAuthors_Call {
	_c.Call.Return(run)
	return _c
}

// ListAuthorsWithBookID provides a mock function with given fields: ctx, bookID
func (_m *MockStore) ListAuthorsWithBookID(ctx context.Context, bookID int64) ([]db.ListAuthorsWithBookIDRow, error) {
	ret := _m.Called(ctx, bookID)

	var r0 []db.ListAuthorsWithBookIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]db.ListAuthorsWithBookIDRow, error)); ok {
		return rf(ctx, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []db.ListAuthorsWithBookIDRow); ok {
		r0 = rf(ctx, bookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ListAuthorsWithBookIDRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListAuthorsWithBookID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAuthorsWithBookID'
type MockStore_ListAuthorsWithBookID_Call struct {
	*mock.Call
}

// ListAuthorsWithBookID is a helper method to define mock.On call
//   - ctx context.Context
//   - bookID int64
func (_e *MockStore_Expecter) ListAuthorsWithBookID(ctx interface{}, bookID interface{}) *MockStore_ListAuthorsWithBookID_Call {
	return &MockStore_ListAuthorsWithBookID_Call{Call: _e.mock.On("ListAuthorsWithBookID", ctx, bookID)}
}

func (_c *MockStore_ListAuthorsWithBookID_Call) Run(run func(ctx context.Context, bookID int64)) *MockStore_ListAuthorsWithBookID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_ListAuthorsWithBookID_Call) Return(_a0 []db.ListAuthorsWithBookIDRow, _a1 error) *MockStore_ListAuthorsWithBookID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListAuthorsWithBookID_Call) RunAndReturn(run func(context.Context, int64) ([]db.ListAuthorsWithBookIDRow, error)) *MockStore_ListAuthorsWithBookID_Call {
	_c.Call.Return(run)
	return _c
}

// ListBooks provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListBooks(ctx context.Context, arg db.ListBooksParams) ([]db.ListBooksRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.ListBooksRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListBooksParams) ([]db.ListBooksRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListBooksParams) []db.ListBooksRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ListBooksRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListBooksParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBooks'
type MockStore_ListBooks_Call struct {
	*mock.Call
}

// ListBooks is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListBooksParams
func (_e *MockStore_Expecter) ListBooks(ctx interface{}, arg interface{}) *MockStore_ListBooks_Call {
	return &MockStore_ListBooks_Call{Call: _e.mock.On("ListBooks", ctx, arg)}
}

func (_c *MockStore_ListBooks_Call) Run(run func(ctx context.Context, arg db.ListBooksParams)) *MockStore_ListBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListBooksParams))
	})
	return _c
}

func (_c *MockStore_ListBooks_Call) Return(_a0 []db.ListBooksRow, _a1 error) *MockStore_ListBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListBooks_Call) RunAndReturn(run func(context.Context, db.ListBooksParams) ([]db.ListBooksRow, error)) *MockStore_ListBooks_Call {
	_c.Call.Return(run)
	return _c
}

// ListPublishers provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListPublishers(ctx context.Context, arg db.ListPublishersParams) ([]db.Publisher, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListPublishersParams) ([]db.Publisher, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListPublishersParams) []db.Publisher); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Publisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListPublishersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_ListPublishers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPublishers'
type MockStore_ListPublishers_Call struct {
	*mock.Call
}

// ListPublishers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListPublishersParams
func (_e *MockStore_Expecter) ListPublishers(ctx interface{}, arg interface{}) *MockStore_ListPublishers_Call {
	return &MockStore_ListPublishers_Call{Call: _e.mock.On("ListPublishers", ctx, arg)}
}

func (_c *MockStore_ListPublishers_Call) Run(run func(ctx context.Context, arg db.ListPublishersParams)) *MockStore_ListPublishers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListPublishersParams))
	})
	return _c
}

func (_c *MockStore_ListPublishers_Call) Return(_a0 []db.Publisher, _a1 error) *MockStore_ListPublishers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_ListPublishers_Call) RunAndReturn(run func(context.Context, db.ListPublishersParams) ([]db.Publisher, error)) *MockStore_ListPublishers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthor provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateAuthor(ctx context.Context, arg db.UpdateAuthorParams) (db.Author, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAuthorParams) (db.Author, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAuthorParams) db.Author); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Author)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateAuthorParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthor'
type MockStore_UpdateAuthor_Call struct {
	*mock.Call
}

// UpdateAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateAuthorParams
func (_e *MockStore_Expecter) UpdateAuthor(ctx interface{}, arg interface{}) *MockStore_UpdateAuthor_Call {
	return &MockStore_UpdateAuthor_Call{Call: _e.mock.On("UpdateAuthor", ctx, arg)}
}

func (_c *MockStore_UpdateAuthor_Call) Run(run func(ctx context.Context, arg db.UpdateAuthorParams)) *MockStore_UpdateAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateAuthorParams))
	})
	return _c
}

func (_c *MockStore_UpdateAuthor_Call) Return(_a0 db.Author, _a1 error) *MockStore_UpdateAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateAuthor_Call) RunAndReturn(run func(context.Context, db.UpdateAuthorParams) (db.Author, error)) *MockStore_UpdateAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBookByISBN provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateBookByISBN(ctx context.Context, arg db.UpdateBookByISBNParams) (db.Book, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateBookByISBNParams) (db.Book, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateBookByISBNParams) db.Book); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateBookByISBNParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdateBookByISBN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBookByISBN'
type MockStore_UpdateBookByISBN_Call struct {
	*mock.Call
}

// UpdateBookByISBN is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateBookByISBNParams
func (_e *MockStore_Expecter) UpdateBookByISBN(ctx interface{}, arg interface{}) *MockStore_UpdateBookByISBN_Call {
	return &MockStore_UpdateBookByISBN_Call{Call: _e.mock.On("UpdateBookByISBN", ctx, arg)}
}

func (_c *MockStore_UpdateBookByISBN_Call) Run(run func(ctx context.Context, arg db.UpdateBookByISBNParams)) *MockStore_UpdateBookByISBN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateBookByISBNParams))
	})
	return _c
}

func (_c *MockStore_UpdateBookByISBN_Call) Return(_a0 db.Book, _a1 error) *MockStore_UpdateBookByISBN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdateBookByISBN_Call) RunAndReturn(run func(context.Context, db.UpdateBookByISBNParams) (db.Book, error)) *MockStore_UpdateBookByISBN_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePublisher provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdatePublisher(ctx context.Context, arg db.UpdatePublisherParams) (db.Publisher, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Publisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdatePublisherParams) (db.Publisher, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdatePublisherParams) db.Publisher); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Publisher)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdatePublisherParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_UpdatePublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePublisher'
type MockStore_UpdatePublisher_Call struct {
	*mock.Call
}

// UpdatePublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdatePublisherParams
func (_e *MockStore_Expecter) UpdatePublisher(ctx interface{}, arg interface{}) *MockStore_UpdatePublisher_Call {
	return &MockStore_UpdatePublisher_Call{Call: _e.mock.On("UpdatePublisher", ctx, arg)}
}

func (_c *MockStore_UpdatePublisher_Call) Run(run func(ctx context.Context, arg db.UpdatePublisherParams)) *MockStore_UpdatePublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdatePublisherParams))
	})
	return _c
}

func (_c *MockStore_UpdatePublisher_Call) Return(_a0 db.Publisher, _a1 error) *MockStore_UpdatePublisher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_UpdatePublisher_Call) RunAndReturn(run func(context.Context, db.UpdatePublisherParams) (db.Publisher, error)) *MockStore_UpdatePublisher_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
